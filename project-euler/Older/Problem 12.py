#Problem 12
#The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
#1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#Let us list the factors of the first seven triangle numbers:
# 1: 1
# 3: 1,3
# 6: 1,2,3,6
#10: 1,2,5,10
#15: 1,3,5,15
#21: 1,3,7,21
#28: 1,2,4,7,14,28
#We can see that 28 is the first triangle number to have over five divisors.
#What is the value of the first triangle number to have over five hundred divisors?

def divisors(ind):
    divs = []
    for d in range(1,trinumbers[ind]+1):
        if trinumbers[ind]%d == 0:
            divs.append(d)
    return divs

def search():
    for x in trinumbers:
        if len(trinumbers)<1000000: #1000000 is an arbitrarily set maximum, just so it doesn't run forever.

            #get the next triangular number and append it to trinumbers
            new = x + trinumbers.index(x)+1
            trinumbers.append(new)
            
            #skip the first 10000 trinumbers since they are not large enough to be what we want
            if len(trinumbers)>10000:

                #skip the numbers which are not divisible by the first few primes
                if trinumbers[-1]%2==0 and trinumbers[-1]%3==0 and trinumbers[-1]%5==0 and trinumbers[-1]%7==0 and trinumbers[-1]%11==0 and trinumbers[-1]%13==0 and trinumbers[-1]%17==0:

                    #get the list of divisors for the newest trinumber, set it to variable divs
                    divs = divisors(-1)

                    #testing the length of divs
                    if len(divs) > 500:
                        print "WE FOUND IT!", str(len(trinumbers)), str(trinumbers[-1]), str(divs), str(len(divs))
                        return trinumbers[-1]
                    else:
                        print str(len(trinumbers)), str(trinumbers[-1]), str(divs), str(len(divs))
        else:
            break

trinumbers = [0]
search()
